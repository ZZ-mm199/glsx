{"remainingRequest":"C:\\glsx\\glsx\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\glsx\\glsx\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\glsx\\glsx\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\glsx\\glsx\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"C:\\glsx\\glsx\\src\\views\\Home.vue","mtime":1625841907533},{"path":"C:\\glsx\\glsx\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\glsx\\glsx\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\glsx\\glsx\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\glsx\\glsx\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}